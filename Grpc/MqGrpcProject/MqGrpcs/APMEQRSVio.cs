// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: APMEQRSVio.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MqGrpcProject {

  /// <summary>Holder for reflection information generated from APMEQRSVio.proto</summary>
  public static partial class APMEQRSVioReflection {

    #region Descriptor
    /// <summary>File descriptor for APMEQRSVio.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static APMEQRSVioReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBBUE1FUVJTVmlvLnByb3RvEg1NcUdycGNQcm9qZWN0IoEECgpBUE1FUVJT",
            "Vl9hEg0KBWxvdGlkGAEgASgJEg8KB254b3Blbm8YAiABKAkSDwoHbnhvcGVp",
            "ZBgDIAEoCRIQCghueG9wZXZlchgEIAEoCRIOCgZzcGx0aWQYBSABKAkSEgoK",
            "cmVzdmVxcHRpZBgGIAEoCRIPCgdsb3RzdGF0GAcgASgJEhAKCHJlc3ZkYXRl",
            "GAggASgJEhQKDHJlc3ZzaGlmdHNlcRgJIAEoCRITCgtyZXN2Y29tbWVudBgK",
            "IAEoCRIVCg1wbGFub3B0d2VpZ2h0GAsgASgJEhUKDW1vdmVvdXR3ZWlnaHQY",
            "DCABKAkSDgoGc2h0Y250GA0gASgJEhAKCGNyc2h0Y250GA4gASgJEg8KB3J1",
            "bmZsYWcYDyABKAkSEQoJcHJvZHVjdGlkGBAgASgJEg4KBmVjY29kZRgRIAEo",
            "CRIPCgdyb3V0ZWlkGBIgASgJEhAKCHJvdXRldmVyGBMgASgJEg8KB2Nyb3Bl",
            "bm8YFCABKAkSEAoIcmVjaXBlaWQYFSABKAkSEAoIaW5zaHRjbnQYFiABKAkS",
            "EQoJc3RkbGR0aW1lGBcgASgJEhIKCm1hbm9wZXRpbWUYGCABKAkSDQoFcGll",
            "Y2UYGSABKAkSEQoJb3Blbm9mbGFnGBogASgJEgsKA2tleRgbIAEoCRIMCgR0",
            "eXBlGBwgASgJIokCChBBUE1FUVJTVl9SZXF1ZXN0EhIKCmFjdGlvbnR5cGUY",
            "ASABKAkSDQoFZmFiaWQYAiABKAkSDQoFYmF5aWQYAyABKAkSEgoKcmVzdmVx",
            "cHRpZBgEIAEoCRIPCgdjbG11c2VyGAUgASgJEg0KBWxvdGlkGAYgASgJEhMK",
            "C2Nyc2h0Y250ZmxnGAcgASgJEhMKC29ubHlyZXN2ZmxnGAggASgJEhcKD29u",
            "bHlvdXR1c2lkZWZsZxgJIAEoCRIRCglsb3RhcnljbnQYCiABKAkSJwoEaWFy",
            "eRgLIAMoCzIZLk1xR3JwY1Byb2plY3QuQVBNRVFSU1ZfYRIQCghzZXJ2ZXJp",
            "cBgMIAEoCSLdAQoOQVBNRVFSU1ZfUmVwbHkSDQoFdHJ4aWQYASABKAkSDgoG",
            "dHlwZWlkGAIgASgJEg8KB3J0bmNvZGUYAyABKAkSDwoHcnRubWVzZxgEIAEo",
            "CRIRCglsb3RhcnljbnQYBSABKAkSKQoEb2FyeRgGIAMoCzIbLk1xR3JwY1By",
            "b2plY3QuQVBNRVFSU1ZvX2ExEhAKCG5vcnN2Y250GAcgASgJEioKBW9hcnkx",
            "GAggAygLMhsuTXFHcnBjUHJvamVjdC5BUE1FUVJTVm9fYTISDgoGZXJybXNn",
            "GAkgASgJIoMECgxBUE1FUVJTVm9fYTESDQoFbG90aWQYASABKAkSDwoHbnhv",
            "cGVubxgCIAEoCRIPCgdueG9wZWlkGAMgASgJEhAKCG54b3BldmVyGAQgASgJ",
            "Eg4KBnNwbHRpZBgFIAEoCRISCgpyZXN2ZXFwdGlkGAYgASgJEg8KB2xvdHN0",
            "YXQYByABKAkSEAoIcmVzdmRhdGUYCCABKAkSFAoMcmVzdnNoaWZ0c2VxGAkg",
            "ASgJEhMKC3Jlc3Zjb21tZW50GAogASgJEhUKDXBsYW5vcHR3ZWlnaHQYCyAB",
            "KAkSFQoNbW92ZW91dHdlaWdodBgMIAEoCRIOCgZzaHRjbnQYDSABKAkSEAoI",
            "Y3JzaHRjbnQYDiABKAkSDwoHcnVuZmxhZxgPIAEoCRIRCglwcm9kdWN0aWQY",
            "ECABKAkSDgoGZWNjb2RlGBEgASgJEg8KB3JvdXRlaWQYEiABKAkSEAoIcm91",
            "dGV2ZXIYEyABKAkSDwoHY3JvcGVubxgUIAEoCRIQCghyZWNpcGVpZBgVIAEo",
            "CRIQCghpbnNodGNudBgWIAEoCRIRCglzdGRsZHRpbWUYFyABKAkSEgoKbWFu",
            "b3BldGltZRgYIAEoCRINCgVwaWVjZRgZIAEoCRIRCglvcGVub2ZsYWcYGiAB",
            "KAkSCwoDa2V5GBsgASgJEgwKBHR5cGUYHCABKAkiqQIKDEFQTUVRUlNWb19h",
            "MhINCgVsb3RpZBgBIAEoCRIRCglwcm9kdWN0aWQYAiABKAkSDgoGZWNjb2Rl",
            "GAMgASgJEhUKDXBsYW5vcHR3ZWlnaHQYBCABKAkSDgoGc2h0Y250GAUgASgJ",
            "Eg8KB3JvdXRlaWQYBiABKAkSEAoIcm91dGV2ZXIYByABKAkSDwoHY3JvcGVu",
            "bxgIIAEoCRIPCgdueG9wZW5vGAkgASgJEg8KB254b3BlaWQYCiABKAkSEAoI",
            "bnhvcGV2ZXIYCyABKAkSEQoJb3Blbm9mbGFnGAwgASgJEhEKCXN0ZGxkdGlt",
            "ZRgNIAEoCRISCgptYW5vcGV0aW1lGA4gASgJEgwKBHR5cGUYDyABKAkSEAoI",
            "Zml0ZXFwdHMYECABKAlCMwoVaW8uZ3JwYy5NcUdycGNQcm9qZWN0QhJNcUdy",
            "cGNQcm9qZWN0UHJvdG9QAaICA0hMV2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MqGrpcProject.APMEQRSV_a), global::MqGrpcProject.APMEQRSV_a.Parser, new[]{ "Lotid", "Nxopeno", "Nxopeid", "Nxopever", "Spltid", "Resveqptid", "Lotstat", "Resvdate", "Resvshiftseq", "Resvcomment", "Planoptweight", "Moveoutweight", "Shtcnt", "Crshtcnt", "Runflag", "Productid", "Eccode", "Routeid", "Routever", "Cropeno", "Recipeid", "Inshtcnt", "Stdldtime", "Manopetime", "Piece", "Openoflag", "Key", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MqGrpcProject.APMEQRSV_Request), global::MqGrpcProject.APMEQRSV_Request.Parser, new[]{ "Actiontype", "Fabid", "Bayid", "Resveqptid", "Clmuser", "Lotid", "Crshtcntflg", "Onlyresvflg", "Onlyoutusideflg", "Lotarycnt", "Iary", "Serverip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MqGrpcProject.APMEQRSV_Reply), global::MqGrpcProject.APMEQRSV_Reply.Parser, new[]{ "Trxid", "Typeid", "Rtncode", "Rtnmesg", "Lotarycnt", "Oary", "Norsvcnt", "Oary1", "Errmsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MqGrpcProject.APMEQRSVo_a1), global::MqGrpcProject.APMEQRSVo_a1.Parser, new[]{ "Lotid", "Nxopeno", "Nxopeid", "Nxopever", "Spltid", "Resveqptid", "Lotstat", "Resvdate", "Resvshiftseq", "Resvcomment", "Planoptweight", "Moveoutweight", "Shtcnt", "Crshtcnt", "Runflag", "Productid", "Eccode", "Routeid", "Routever", "Cropeno", "Recipeid", "Inshtcnt", "Stdldtime", "Manopetime", "Piece", "Openoflag", "Key", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MqGrpcProject.APMEQRSVo_a2), global::MqGrpcProject.APMEQRSVo_a2.Parser, new[]{ "Lotid", "Productid", "Eccode", "Planoptweight", "Shtcnt", "Routeid", "Routever", "Cropeno", "Nxopeno", "Nxopeid", "Nxopever", "Openoflag", "Stdldtime", "Manopetime", "Type", "Fiteqpts" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class APMEQRSV_a : pb::IMessage<APMEQRSV_a> {
    private static readonly pb::MessageParser<APMEQRSV_a> _parser = new pb::MessageParser<APMEQRSV_a>(() => new APMEQRSV_a());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APMEQRSV_a> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MqGrpcProject.APMEQRSVioReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSV_a() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSV_a(APMEQRSV_a other) : this() {
      lotid_ = other.lotid_;
      nxopeno_ = other.nxopeno_;
      nxopeid_ = other.nxopeid_;
      nxopever_ = other.nxopever_;
      spltid_ = other.spltid_;
      resveqptid_ = other.resveqptid_;
      lotstat_ = other.lotstat_;
      resvdate_ = other.resvdate_;
      resvshiftseq_ = other.resvshiftseq_;
      resvcomment_ = other.resvcomment_;
      planoptweight_ = other.planoptweight_;
      moveoutweight_ = other.moveoutweight_;
      shtcnt_ = other.shtcnt_;
      crshtcnt_ = other.crshtcnt_;
      runflag_ = other.runflag_;
      productid_ = other.productid_;
      eccode_ = other.eccode_;
      routeid_ = other.routeid_;
      routever_ = other.routever_;
      cropeno_ = other.cropeno_;
      recipeid_ = other.recipeid_;
      inshtcnt_ = other.inshtcnt_;
      stdldtime_ = other.stdldtime_;
      manopetime_ = other.manopetime_;
      piece_ = other.piece_;
      openoflag_ = other.openoflag_;
      key_ = other.key_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSV_a Clone() {
      return new APMEQRSV_a(this);
    }

    /// <summary>Field number for the "lotid" field.</summary>
    public const int LotidFieldNumber = 1;
    private string lotid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotid {
      get { return lotid_; }
      set {
        lotid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopeno" field.</summary>
    public const int NxopenoFieldNumber = 2;
    private string nxopeno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopeno {
      get { return nxopeno_; }
      set {
        nxopeno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopeid" field.</summary>
    public const int NxopeidFieldNumber = 3;
    private string nxopeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopeid {
      get { return nxopeid_; }
      set {
        nxopeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopever" field.</summary>
    public const int NxopeverFieldNumber = 4;
    private string nxopever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopever {
      get { return nxopever_; }
      set {
        nxopever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spltid" field.</summary>
    public const int SpltidFieldNumber = 5;
    private string spltid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spltid {
      get { return spltid_; }
      set {
        spltid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resveqptid" field.</summary>
    public const int ResveqptidFieldNumber = 6;
    private string resveqptid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resveqptid {
      get { return resveqptid_; }
      set {
        resveqptid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lotstat" field.</summary>
    public const int LotstatFieldNumber = 7;
    private string lotstat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotstat {
      get { return lotstat_; }
      set {
        lotstat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resvdate" field.</summary>
    public const int ResvdateFieldNumber = 8;
    private string resvdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resvdate {
      get { return resvdate_; }
      set {
        resvdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resvshiftseq" field.</summary>
    public const int ResvshiftseqFieldNumber = 9;
    private string resvshiftseq_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resvshiftseq {
      get { return resvshiftseq_; }
      set {
        resvshiftseq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resvcomment" field.</summary>
    public const int ResvcommentFieldNumber = 10;
    private string resvcomment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resvcomment {
      get { return resvcomment_; }
      set {
        resvcomment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "planoptweight" field.</summary>
    public const int PlanoptweightFieldNumber = 11;
    private string planoptweight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Planoptweight {
      get { return planoptweight_; }
      set {
        planoptweight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "moveoutweight" field.</summary>
    public const int MoveoutweightFieldNumber = 12;
    private string moveoutweight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Moveoutweight {
      get { return moveoutweight_; }
      set {
        moveoutweight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shtcnt" field.</summary>
    public const int ShtcntFieldNumber = 13;
    private string shtcnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shtcnt {
      get { return shtcnt_; }
      set {
        shtcnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crshtcnt" field.</summary>
    public const int CrshtcntFieldNumber = 14;
    private string crshtcnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Crshtcnt {
      get { return crshtcnt_; }
      set {
        crshtcnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "runflag" field.</summary>
    public const int RunflagFieldNumber = 15;
    private string runflag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Runflag {
      get { return runflag_; }
      set {
        runflag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productid" field.</summary>
    public const int ProductidFieldNumber = 16;
    private string productid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Productid {
      get { return productid_; }
      set {
        productid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eccode" field.</summary>
    public const int EccodeFieldNumber = 17;
    private string eccode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Eccode {
      get { return eccode_; }
      set {
        eccode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routeid" field.</summary>
    public const int RouteidFieldNumber = 18;
    private string routeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Routeid {
      get { return routeid_; }
      set {
        routeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routever" field.</summary>
    public const int RouteverFieldNumber = 19;
    private string routever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Routever {
      get { return routever_; }
      set {
        routever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cropeno" field.</summary>
    public const int CropenoFieldNumber = 20;
    private string cropeno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cropeno {
      get { return cropeno_; }
      set {
        cropeno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recipeid" field.</summary>
    public const int RecipeidFieldNumber = 21;
    private string recipeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recipeid {
      get { return recipeid_; }
      set {
        recipeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inshtcnt" field.</summary>
    public const int InshtcntFieldNumber = 22;
    private string inshtcnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Inshtcnt {
      get { return inshtcnt_; }
      set {
        inshtcnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stdldtime" field.</summary>
    public const int StdldtimeFieldNumber = 23;
    private string stdldtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stdldtime {
      get { return stdldtime_; }
      set {
        stdldtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manopetime" field.</summary>
    public const int ManopetimeFieldNumber = 24;
    private string manopetime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manopetime {
      get { return manopetime_; }
      set {
        manopetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "piece" field.</summary>
    public const int PieceFieldNumber = 25;
    private string piece_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Piece {
      get { return piece_; }
      set {
        piece_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openoflag" field.</summary>
    public const int OpenoflagFieldNumber = 26;
    private string openoflag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Openoflag {
      get { return openoflag_; }
      set {
        openoflag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 27;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 28;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APMEQRSV_a);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APMEQRSV_a other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lotid != other.Lotid) return false;
      if (Nxopeno != other.Nxopeno) return false;
      if (Nxopeid != other.Nxopeid) return false;
      if (Nxopever != other.Nxopever) return false;
      if (Spltid != other.Spltid) return false;
      if (Resveqptid != other.Resveqptid) return false;
      if (Lotstat != other.Lotstat) return false;
      if (Resvdate != other.Resvdate) return false;
      if (Resvshiftseq != other.Resvshiftseq) return false;
      if (Resvcomment != other.Resvcomment) return false;
      if (Planoptweight != other.Planoptweight) return false;
      if (Moveoutweight != other.Moveoutweight) return false;
      if (Shtcnt != other.Shtcnt) return false;
      if (Crshtcnt != other.Crshtcnt) return false;
      if (Runflag != other.Runflag) return false;
      if (Productid != other.Productid) return false;
      if (Eccode != other.Eccode) return false;
      if (Routeid != other.Routeid) return false;
      if (Routever != other.Routever) return false;
      if (Cropeno != other.Cropeno) return false;
      if (Recipeid != other.Recipeid) return false;
      if (Inshtcnt != other.Inshtcnt) return false;
      if (Stdldtime != other.Stdldtime) return false;
      if (Manopetime != other.Manopetime) return false;
      if (Piece != other.Piece) return false;
      if (Openoflag != other.Openoflag) return false;
      if (Key != other.Key) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lotid.Length != 0) hash ^= Lotid.GetHashCode();
      if (Nxopeno.Length != 0) hash ^= Nxopeno.GetHashCode();
      if (Nxopeid.Length != 0) hash ^= Nxopeid.GetHashCode();
      if (Nxopever.Length != 0) hash ^= Nxopever.GetHashCode();
      if (Spltid.Length != 0) hash ^= Spltid.GetHashCode();
      if (Resveqptid.Length != 0) hash ^= Resveqptid.GetHashCode();
      if (Lotstat.Length != 0) hash ^= Lotstat.GetHashCode();
      if (Resvdate.Length != 0) hash ^= Resvdate.GetHashCode();
      if (Resvshiftseq.Length != 0) hash ^= Resvshiftseq.GetHashCode();
      if (Resvcomment.Length != 0) hash ^= Resvcomment.GetHashCode();
      if (Planoptweight.Length != 0) hash ^= Planoptweight.GetHashCode();
      if (Moveoutweight.Length != 0) hash ^= Moveoutweight.GetHashCode();
      if (Shtcnt.Length != 0) hash ^= Shtcnt.GetHashCode();
      if (Crshtcnt.Length != 0) hash ^= Crshtcnt.GetHashCode();
      if (Runflag.Length != 0) hash ^= Runflag.GetHashCode();
      if (Productid.Length != 0) hash ^= Productid.GetHashCode();
      if (Eccode.Length != 0) hash ^= Eccode.GetHashCode();
      if (Routeid.Length != 0) hash ^= Routeid.GetHashCode();
      if (Routever.Length != 0) hash ^= Routever.GetHashCode();
      if (Cropeno.Length != 0) hash ^= Cropeno.GetHashCode();
      if (Recipeid.Length != 0) hash ^= Recipeid.GetHashCode();
      if (Inshtcnt.Length != 0) hash ^= Inshtcnt.GetHashCode();
      if (Stdldtime.Length != 0) hash ^= Stdldtime.GetHashCode();
      if (Manopetime.Length != 0) hash ^= Manopetime.GetHashCode();
      if (Piece.Length != 0) hash ^= Piece.GetHashCode();
      if (Openoflag.Length != 0) hash ^= Openoflag.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lotid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Lotid);
      }
      if (Nxopeno.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nxopeno);
      }
      if (Nxopeid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nxopeid);
      }
      if (Nxopever.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Nxopever);
      }
      if (Spltid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Spltid);
      }
      if (Resveqptid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Resveqptid);
      }
      if (Lotstat.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Lotstat);
      }
      if (Resvdate.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Resvdate);
      }
      if (Resvshiftseq.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Resvshiftseq);
      }
      if (Resvcomment.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Resvcomment);
      }
      if (Planoptweight.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Planoptweight);
      }
      if (Moveoutweight.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Moveoutweight);
      }
      if (Shtcnt.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Shtcnt);
      }
      if (Crshtcnt.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Crshtcnt);
      }
      if (Runflag.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Runflag);
      }
      if (Productid.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Productid);
      }
      if (Eccode.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Eccode);
      }
      if (Routeid.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Routeid);
      }
      if (Routever.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Routever);
      }
      if (Cropeno.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Cropeno);
      }
      if (Recipeid.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Recipeid);
      }
      if (Inshtcnt.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Inshtcnt);
      }
      if (Stdldtime.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Stdldtime);
      }
      if (Manopetime.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Manopetime);
      }
      if (Piece.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Piece);
      }
      if (Openoflag.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Openoflag);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Key);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lotid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotid);
      }
      if (Nxopeno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nxopeno);
      }
      if (Nxopeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nxopeid);
      }
      if (Nxopever.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nxopever);
      }
      if (Spltid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Spltid);
      }
      if (Resveqptid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resveqptid);
      }
      if (Lotstat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotstat);
      }
      if (Resvdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resvdate);
      }
      if (Resvshiftseq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resvshiftseq);
      }
      if (Resvcomment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resvcomment);
      }
      if (Planoptweight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Planoptweight);
      }
      if (Moveoutweight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Moveoutweight);
      }
      if (Shtcnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shtcnt);
      }
      if (Crshtcnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Crshtcnt);
      }
      if (Runflag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Runflag);
      }
      if (Productid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Productid);
      }
      if (Eccode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Eccode);
      }
      if (Routeid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Routeid);
      }
      if (Routever.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Routever);
      }
      if (Cropeno.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Cropeno);
      }
      if (Recipeid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Recipeid);
      }
      if (Inshtcnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Inshtcnt);
      }
      if (Stdldtime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Stdldtime);
      }
      if (Manopetime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Manopetime);
      }
      if (Piece.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Piece);
      }
      if (Openoflag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Openoflag);
      }
      if (Key.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Type.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APMEQRSV_a other) {
      if (other == null) {
        return;
      }
      if (other.Lotid.Length != 0) {
        Lotid = other.Lotid;
      }
      if (other.Nxopeno.Length != 0) {
        Nxopeno = other.Nxopeno;
      }
      if (other.Nxopeid.Length != 0) {
        Nxopeid = other.Nxopeid;
      }
      if (other.Nxopever.Length != 0) {
        Nxopever = other.Nxopever;
      }
      if (other.Spltid.Length != 0) {
        Spltid = other.Spltid;
      }
      if (other.Resveqptid.Length != 0) {
        Resveqptid = other.Resveqptid;
      }
      if (other.Lotstat.Length != 0) {
        Lotstat = other.Lotstat;
      }
      if (other.Resvdate.Length != 0) {
        Resvdate = other.Resvdate;
      }
      if (other.Resvshiftseq.Length != 0) {
        Resvshiftseq = other.Resvshiftseq;
      }
      if (other.Resvcomment.Length != 0) {
        Resvcomment = other.Resvcomment;
      }
      if (other.Planoptweight.Length != 0) {
        Planoptweight = other.Planoptweight;
      }
      if (other.Moveoutweight.Length != 0) {
        Moveoutweight = other.Moveoutweight;
      }
      if (other.Shtcnt.Length != 0) {
        Shtcnt = other.Shtcnt;
      }
      if (other.Crshtcnt.Length != 0) {
        Crshtcnt = other.Crshtcnt;
      }
      if (other.Runflag.Length != 0) {
        Runflag = other.Runflag;
      }
      if (other.Productid.Length != 0) {
        Productid = other.Productid;
      }
      if (other.Eccode.Length != 0) {
        Eccode = other.Eccode;
      }
      if (other.Routeid.Length != 0) {
        Routeid = other.Routeid;
      }
      if (other.Routever.Length != 0) {
        Routever = other.Routever;
      }
      if (other.Cropeno.Length != 0) {
        Cropeno = other.Cropeno;
      }
      if (other.Recipeid.Length != 0) {
        Recipeid = other.Recipeid;
      }
      if (other.Inshtcnt.Length != 0) {
        Inshtcnt = other.Inshtcnt;
      }
      if (other.Stdldtime.Length != 0) {
        Stdldtime = other.Stdldtime;
      }
      if (other.Manopetime.Length != 0) {
        Manopetime = other.Manopetime;
      }
      if (other.Piece.Length != 0) {
        Piece = other.Piece;
      }
      if (other.Openoflag.Length != 0) {
        Openoflag = other.Openoflag;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Lotid = input.ReadString();
            break;
          }
          case 18: {
            Nxopeno = input.ReadString();
            break;
          }
          case 26: {
            Nxopeid = input.ReadString();
            break;
          }
          case 34: {
            Nxopever = input.ReadString();
            break;
          }
          case 42: {
            Spltid = input.ReadString();
            break;
          }
          case 50: {
            Resveqptid = input.ReadString();
            break;
          }
          case 58: {
            Lotstat = input.ReadString();
            break;
          }
          case 66: {
            Resvdate = input.ReadString();
            break;
          }
          case 74: {
            Resvshiftseq = input.ReadString();
            break;
          }
          case 82: {
            Resvcomment = input.ReadString();
            break;
          }
          case 90: {
            Planoptweight = input.ReadString();
            break;
          }
          case 98: {
            Moveoutweight = input.ReadString();
            break;
          }
          case 106: {
            Shtcnt = input.ReadString();
            break;
          }
          case 114: {
            Crshtcnt = input.ReadString();
            break;
          }
          case 122: {
            Runflag = input.ReadString();
            break;
          }
          case 130: {
            Productid = input.ReadString();
            break;
          }
          case 138: {
            Eccode = input.ReadString();
            break;
          }
          case 146: {
            Routeid = input.ReadString();
            break;
          }
          case 154: {
            Routever = input.ReadString();
            break;
          }
          case 162: {
            Cropeno = input.ReadString();
            break;
          }
          case 170: {
            Recipeid = input.ReadString();
            break;
          }
          case 178: {
            Inshtcnt = input.ReadString();
            break;
          }
          case 186: {
            Stdldtime = input.ReadString();
            break;
          }
          case 194: {
            Manopetime = input.ReadString();
            break;
          }
          case 202: {
            Piece = input.ReadString();
            break;
          }
          case 210: {
            Openoflag = input.ReadString();
            break;
          }
          case 218: {
            Key = input.ReadString();
            break;
          }
          case 226: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the user's name.
  /// </summary>
  public sealed partial class APMEQRSV_Request : pb::IMessage<APMEQRSV_Request> {
    private static readonly pb::MessageParser<APMEQRSV_Request> _parser = new pb::MessageParser<APMEQRSV_Request>(() => new APMEQRSV_Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APMEQRSV_Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MqGrpcProject.APMEQRSVioReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSV_Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSV_Request(APMEQRSV_Request other) : this() {
      actiontype_ = other.actiontype_;
      fabid_ = other.fabid_;
      bayid_ = other.bayid_;
      resveqptid_ = other.resveqptid_;
      clmuser_ = other.clmuser_;
      lotid_ = other.lotid_;
      crshtcntflg_ = other.crshtcntflg_;
      onlyresvflg_ = other.onlyresvflg_;
      onlyoutusideflg_ = other.onlyoutusideflg_;
      lotarycnt_ = other.lotarycnt_;
      iary_ = other.iary_.Clone();
      serverip_ = other.serverip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSV_Request Clone() {
      return new APMEQRSV_Request(this);
    }

    /// <summary>Field number for the "actiontype" field.</summary>
    public const int ActiontypeFieldNumber = 1;
    private string actiontype_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Actiontype {
      get { return actiontype_; }
      set {
        actiontype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fabid" field.</summary>
    public const int FabidFieldNumber = 2;
    private string fabid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fabid {
      get { return fabid_; }
      set {
        fabid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bayid" field.</summary>
    public const int BayidFieldNumber = 3;
    private string bayid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bayid {
      get { return bayid_; }
      set {
        bayid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resveqptid" field.</summary>
    public const int ResveqptidFieldNumber = 4;
    private string resveqptid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resveqptid {
      get { return resveqptid_; }
      set {
        resveqptid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clmuser" field.</summary>
    public const int ClmuserFieldNumber = 5;
    private string clmuser_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Clmuser {
      get { return clmuser_; }
      set {
        clmuser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lotid" field.</summary>
    public const int LotidFieldNumber = 6;
    private string lotid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotid {
      get { return lotid_; }
      set {
        lotid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crshtcntflg" field.</summary>
    public const int CrshtcntflgFieldNumber = 7;
    private string crshtcntflg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Crshtcntflg {
      get { return crshtcntflg_; }
      set {
        crshtcntflg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "onlyresvflg" field.</summary>
    public const int OnlyresvflgFieldNumber = 8;
    private string onlyresvflg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Onlyresvflg {
      get { return onlyresvflg_; }
      set {
        onlyresvflg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "onlyoutusideflg" field.</summary>
    public const int OnlyoutusideflgFieldNumber = 9;
    private string onlyoutusideflg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Onlyoutusideflg {
      get { return onlyoutusideflg_; }
      set {
        onlyoutusideflg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lotarycnt" field.</summary>
    public const int LotarycntFieldNumber = 10;
    private string lotarycnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotarycnt {
      get { return lotarycnt_; }
      set {
        lotarycnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iary" field.</summary>
    public const int IaryFieldNumber = 11;
    private static readonly pb::FieldCodec<global::MqGrpcProject.APMEQRSV_a> _repeated_iary_codec
        = pb::FieldCodec.ForMessage(90, global::MqGrpcProject.APMEQRSV_a.Parser);
    private readonly pbc::RepeatedField<global::MqGrpcProject.APMEQRSV_a> iary_ = new pbc::RepeatedField<global::MqGrpcProject.APMEQRSV_a>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MqGrpcProject.APMEQRSV_a> Iary {
      get { return iary_; }
    }

    /// <summary>Field number for the "serverip" field.</summary>
    public const int ServeripFieldNumber = 12;
    private string serverip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serverip {
      get { return serverip_; }
      set {
        serverip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APMEQRSV_Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APMEQRSV_Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Actiontype != other.Actiontype) return false;
      if (Fabid != other.Fabid) return false;
      if (Bayid != other.Bayid) return false;
      if (Resveqptid != other.Resveqptid) return false;
      if (Clmuser != other.Clmuser) return false;
      if (Lotid != other.Lotid) return false;
      if (Crshtcntflg != other.Crshtcntflg) return false;
      if (Onlyresvflg != other.Onlyresvflg) return false;
      if (Onlyoutusideflg != other.Onlyoutusideflg) return false;
      if (Lotarycnt != other.Lotarycnt) return false;
      if(!iary_.Equals(other.iary_)) return false;
      if (Serverip != other.Serverip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Actiontype.Length != 0) hash ^= Actiontype.GetHashCode();
      if (Fabid.Length != 0) hash ^= Fabid.GetHashCode();
      if (Bayid.Length != 0) hash ^= Bayid.GetHashCode();
      if (Resveqptid.Length != 0) hash ^= Resveqptid.GetHashCode();
      if (Clmuser.Length != 0) hash ^= Clmuser.GetHashCode();
      if (Lotid.Length != 0) hash ^= Lotid.GetHashCode();
      if (Crshtcntflg.Length != 0) hash ^= Crshtcntflg.GetHashCode();
      if (Onlyresvflg.Length != 0) hash ^= Onlyresvflg.GetHashCode();
      if (Onlyoutusideflg.Length != 0) hash ^= Onlyoutusideflg.GetHashCode();
      if (Lotarycnt.Length != 0) hash ^= Lotarycnt.GetHashCode();
      hash ^= iary_.GetHashCode();
      if (Serverip.Length != 0) hash ^= Serverip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Actiontype.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Actiontype);
      }
      if (Fabid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fabid);
      }
      if (Bayid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Bayid);
      }
      if (Resveqptid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Resveqptid);
      }
      if (Clmuser.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Clmuser);
      }
      if (Lotid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Lotid);
      }
      if (Crshtcntflg.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Crshtcntflg);
      }
      if (Onlyresvflg.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Onlyresvflg);
      }
      if (Onlyoutusideflg.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Onlyoutusideflg);
      }
      if (Lotarycnt.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Lotarycnt);
      }
      iary_.WriteTo(output, _repeated_iary_codec);
      if (Serverip.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Serverip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Actiontype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Actiontype);
      }
      if (Fabid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fabid);
      }
      if (Bayid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bayid);
      }
      if (Resveqptid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resveqptid);
      }
      if (Clmuser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clmuser);
      }
      if (Lotid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotid);
      }
      if (Crshtcntflg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Crshtcntflg);
      }
      if (Onlyresvflg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Onlyresvflg);
      }
      if (Onlyoutusideflg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Onlyoutusideflg);
      }
      if (Lotarycnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotarycnt);
      }
      size += iary_.CalculateSize(_repeated_iary_codec);
      if (Serverip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serverip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APMEQRSV_Request other) {
      if (other == null) {
        return;
      }
      if (other.Actiontype.Length != 0) {
        Actiontype = other.Actiontype;
      }
      if (other.Fabid.Length != 0) {
        Fabid = other.Fabid;
      }
      if (other.Bayid.Length != 0) {
        Bayid = other.Bayid;
      }
      if (other.Resveqptid.Length != 0) {
        Resveqptid = other.Resveqptid;
      }
      if (other.Clmuser.Length != 0) {
        Clmuser = other.Clmuser;
      }
      if (other.Lotid.Length != 0) {
        Lotid = other.Lotid;
      }
      if (other.Crshtcntflg.Length != 0) {
        Crshtcntflg = other.Crshtcntflg;
      }
      if (other.Onlyresvflg.Length != 0) {
        Onlyresvflg = other.Onlyresvflg;
      }
      if (other.Onlyoutusideflg.Length != 0) {
        Onlyoutusideflg = other.Onlyoutusideflg;
      }
      if (other.Lotarycnt.Length != 0) {
        Lotarycnt = other.Lotarycnt;
      }
      iary_.Add(other.iary_);
      if (other.Serverip.Length != 0) {
        Serverip = other.Serverip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Actiontype = input.ReadString();
            break;
          }
          case 18: {
            Fabid = input.ReadString();
            break;
          }
          case 26: {
            Bayid = input.ReadString();
            break;
          }
          case 34: {
            Resveqptid = input.ReadString();
            break;
          }
          case 42: {
            Clmuser = input.ReadString();
            break;
          }
          case 50: {
            Lotid = input.ReadString();
            break;
          }
          case 58: {
            Crshtcntflg = input.ReadString();
            break;
          }
          case 66: {
            Onlyresvflg = input.ReadString();
            break;
          }
          case 74: {
            Onlyoutusideflg = input.ReadString();
            break;
          }
          case 82: {
            Lotarycnt = input.ReadString();
            break;
          }
          case 90: {
            iary_.AddEntriesFrom(input, _repeated_iary_codec);
            break;
          }
          case 98: {
            Serverip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the greetings
  /// </summary>
  public sealed partial class APMEQRSV_Reply : pb::IMessage<APMEQRSV_Reply> {
    private static readonly pb::MessageParser<APMEQRSV_Reply> _parser = new pb::MessageParser<APMEQRSV_Reply>(() => new APMEQRSV_Reply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APMEQRSV_Reply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MqGrpcProject.APMEQRSVioReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSV_Reply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSV_Reply(APMEQRSV_Reply other) : this() {
      trxid_ = other.trxid_;
      typeid_ = other.typeid_;
      rtncode_ = other.rtncode_;
      rtnmesg_ = other.rtnmesg_;
      lotarycnt_ = other.lotarycnt_;
      oary_ = other.oary_.Clone();
      norsvcnt_ = other.norsvcnt_;
      oary1_ = other.oary1_.Clone();
      errmsg_ = other.errmsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSV_Reply Clone() {
      return new APMEQRSV_Reply(this);
    }

    /// <summary>Field number for the "trxid" field.</summary>
    public const int TrxidFieldNumber = 1;
    private string trxid_ = "";
    /// <summary>
    ///string result = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trxid {
      get { return trxid_; }
      set {
        trxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "typeid" field.</summary>
    public const int TypeidFieldNumber = 2;
    private string typeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Typeid {
      get { return typeid_; }
      set {
        typeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rtncode" field.</summary>
    public const int RtncodeFieldNumber = 3;
    private string rtncode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rtncode {
      get { return rtncode_; }
      set {
        rtncode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rtnmesg" field.</summary>
    public const int RtnmesgFieldNumber = 4;
    private string rtnmesg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rtnmesg {
      get { return rtnmesg_; }
      set {
        rtnmesg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lotarycnt" field.</summary>
    public const int LotarycntFieldNumber = 5;
    private string lotarycnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotarycnt {
      get { return lotarycnt_; }
      set {
        lotarycnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oary" field.</summary>
    public const int OaryFieldNumber = 6;
    private static readonly pb::FieldCodec<global::MqGrpcProject.APMEQRSVo_a1> _repeated_oary_codec
        = pb::FieldCodec.ForMessage(50, global::MqGrpcProject.APMEQRSVo_a1.Parser);
    private readonly pbc::RepeatedField<global::MqGrpcProject.APMEQRSVo_a1> oary_ = new pbc::RepeatedField<global::MqGrpcProject.APMEQRSVo_a1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MqGrpcProject.APMEQRSVo_a1> Oary {
      get { return oary_; }
    }

    /// <summary>Field number for the "norsvcnt" field.</summary>
    public const int NorsvcntFieldNumber = 7;
    private string norsvcnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Norsvcnt {
      get { return norsvcnt_; }
      set {
        norsvcnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oary1" field.</summary>
    public const int Oary1FieldNumber = 8;
    private static readonly pb::FieldCodec<global::MqGrpcProject.APMEQRSVo_a2> _repeated_oary1_codec
        = pb::FieldCodec.ForMessage(66, global::MqGrpcProject.APMEQRSVo_a2.Parser);
    private readonly pbc::RepeatedField<global::MqGrpcProject.APMEQRSVo_a2> oary1_ = new pbc::RepeatedField<global::MqGrpcProject.APMEQRSVo_a2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MqGrpcProject.APMEQRSVo_a2> Oary1 {
      get { return oary1_; }
    }

    /// <summary>Field number for the "errmsg" field.</summary>
    public const int ErrmsgFieldNumber = 9;
    private string errmsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Errmsg {
      get { return errmsg_; }
      set {
        errmsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APMEQRSV_Reply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APMEQRSV_Reply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Trxid != other.Trxid) return false;
      if (Typeid != other.Typeid) return false;
      if (Rtncode != other.Rtncode) return false;
      if (Rtnmesg != other.Rtnmesg) return false;
      if (Lotarycnt != other.Lotarycnt) return false;
      if(!oary_.Equals(other.oary_)) return false;
      if (Norsvcnt != other.Norsvcnt) return false;
      if(!oary1_.Equals(other.oary1_)) return false;
      if (Errmsg != other.Errmsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Trxid.Length != 0) hash ^= Trxid.GetHashCode();
      if (Typeid.Length != 0) hash ^= Typeid.GetHashCode();
      if (Rtncode.Length != 0) hash ^= Rtncode.GetHashCode();
      if (Rtnmesg.Length != 0) hash ^= Rtnmesg.GetHashCode();
      if (Lotarycnt.Length != 0) hash ^= Lotarycnt.GetHashCode();
      hash ^= oary_.GetHashCode();
      if (Norsvcnt.Length != 0) hash ^= Norsvcnt.GetHashCode();
      hash ^= oary1_.GetHashCode();
      if (Errmsg.Length != 0) hash ^= Errmsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Trxid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Trxid);
      }
      if (Typeid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Typeid);
      }
      if (Rtncode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Rtncode);
      }
      if (Rtnmesg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Rtnmesg);
      }
      if (Lotarycnt.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Lotarycnt);
      }
      oary_.WriteTo(output, _repeated_oary_codec);
      if (Norsvcnt.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Norsvcnt);
      }
      oary1_.WriteTo(output, _repeated_oary1_codec);
      if (Errmsg.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Errmsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Trxid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trxid);
      }
      if (Typeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Typeid);
      }
      if (Rtncode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rtncode);
      }
      if (Rtnmesg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rtnmesg);
      }
      if (Lotarycnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotarycnt);
      }
      size += oary_.CalculateSize(_repeated_oary_codec);
      if (Norsvcnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Norsvcnt);
      }
      size += oary1_.CalculateSize(_repeated_oary1_codec);
      if (Errmsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Errmsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APMEQRSV_Reply other) {
      if (other == null) {
        return;
      }
      if (other.Trxid.Length != 0) {
        Trxid = other.Trxid;
      }
      if (other.Typeid.Length != 0) {
        Typeid = other.Typeid;
      }
      if (other.Rtncode.Length != 0) {
        Rtncode = other.Rtncode;
      }
      if (other.Rtnmesg.Length != 0) {
        Rtnmesg = other.Rtnmesg;
      }
      if (other.Lotarycnt.Length != 0) {
        Lotarycnt = other.Lotarycnt;
      }
      oary_.Add(other.oary_);
      if (other.Norsvcnt.Length != 0) {
        Norsvcnt = other.Norsvcnt;
      }
      oary1_.Add(other.oary1_);
      if (other.Errmsg.Length != 0) {
        Errmsg = other.Errmsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Trxid = input.ReadString();
            break;
          }
          case 18: {
            Typeid = input.ReadString();
            break;
          }
          case 26: {
            Rtncode = input.ReadString();
            break;
          }
          case 34: {
            Rtnmesg = input.ReadString();
            break;
          }
          case 42: {
            Lotarycnt = input.ReadString();
            break;
          }
          case 50: {
            oary_.AddEntriesFrom(input, _repeated_oary_codec);
            break;
          }
          case 58: {
            Norsvcnt = input.ReadString();
            break;
          }
          case 66: {
            oary1_.AddEntriesFrom(input, _repeated_oary1_codec);
            break;
          }
          case 74: {
            Errmsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class APMEQRSVo_a1 : pb::IMessage<APMEQRSVo_a1> {
    private static readonly pb::MessageParser<APMEQRSVo_a1> _parser = new pb::MessageParser<APMEQRSVo_a1>(() => new APMEQRSVo_a1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APMEQRSVo_a1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MqGrpcProject.APMEQRSVioReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSVo_a1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSVo_a1(APMEQRSVo_a1 other) : this() {
      lotid_ = other.lotid_;
      nxopeno_ = other.nxopeno_;
      nxopeid_ = other.nxopeid_;
      nxopever_ = other.nxopever_;
      spltid_ = other.spltid_;
      resveqptid_ = other.resveqptid_;
      lotstat_ = other.lotstat_;
      resvdate_ = other.resvdate_;
      resvshiftseq_ = other.resvshiftseq_;
      resvcomment_ = other.resvcomment_;
      planoptweight_ = other.planoptweight_;
      moveoutweight_ = other.moveoutweight_;
      shtcnt_ = other.shtcnt_;
      crshtcnt_ = other.crshtcnt_;
      runflag_ = other.runflag_;
      productid_ = other.productid_;
      eccode_ = other.eccode_;
      routeid_ = other.routeid_;
      routever_ = other.routever_;
      cropeno_ = other.cropeno_;
      recipeid_ = other.recipeid_;
      inshtcnt_ = other.inshtcnt_;
      stdldtime_ = other.stdldtime_;
      manopetime_ = other.manopetime_;
      piece_ = other.piece_;
      openoflag_ = other.openoflag_;
      key_ = other.key_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSVo_a1 Clone() {
      return new APMEQRSVo_a1(this);
    }

    /// <summary>Field number for the "lotid" field.</summary>
    public const int LotidFieldNumber = 1;
    private string lotid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotid {
      get { return lotid_; }
      set {
        lotid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopeno" field.</summary>
    public const int NxopenoFieldNumber = 2;
    private string nxopeno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopeno {
      get { return nxopeno_; }
      set {
        nxopeno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopeid" field.</summary>
    public const int NxopeidFieldNumber = 3;
    private string nxopeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopeid {
      get { return nxopeid_; }
      set {
        nxopeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopever" field.</summary>
    public const int NxopeverFieldNumber = 4;
    private string nxopever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopever {
      get { return nxopever_; }
      set {
        nxopever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spltid" field.</summary>
    public const int SpltidFieldNumber = 5;
    private string spltid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spltid {
      get { return spltid_; }
      set {
        spltid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resveqptid" field.</summary>
    public const int ResveqptidFieldNumber = 6;
    private string resveqptid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resveqptid {
      get { return resveqptid_; }
      set {
        resveqptid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lotstat" field.</summary>
    public const int LotstatFieldNumber = 7;
    private string lotstat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotstat {
      get { return lotstat_; }
      set {
        lotstat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resvdate" field.</summary>
    public const int ResvdateFieldNumber = 8;
    private string resvdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resvdate {
      get { return resvdate_; }
      set {
        resvdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resvshiftseq" field.</summary>
    public const int ResvshiftseqFieldNumber = 9;
    private string resvshiftseq_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resvshiftseq {
      get { return resvshiftseq_; }
      set {
        resvshiftseq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resvcomment" field.</summary>
    public const int ResvcommentFieldNumber = 10;
    private string resvcomment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resvcomment {
      get { return resvcomment_; }
      set {
        resvcomment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "planoptweight" field.</summary>
    public const int PlanoptweightFieldNumber = 11;
    private string planoptweight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Planoptweight {
      get { return planoptweight_; }
      set {
        planoptweight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "moveoutweight" field.</summary>
    public const int MoveoutweightFieldNumber = 12;
    private string moveoutweight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Moveoutweight {
      get { return moveoutweight_; }
      set {
        moveoutweight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shtcnt" field.</summary>
    public const int ShtcntFieldNumber = 13;
    private string shtcnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shtcnt {
      get { return shtcnt_; }
      set {
        shtcnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crshtcnt" field.</summary>
    public const int CrshtcntFieldNumber = 14;
    private string crshtcnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Crshtcnt {
      get { return crshtcnt_; }
      set {
        crshtcnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "runflag" field.</summary>
    public const int RunflagFieldNumber = 15;
    private string runflag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Runflag {
      get { return runflag_; }
      set {
        runflag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productid" field.</summary>
    public const int ProductidFieldNumber = 16;
    private string productid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Productid {
      get { return productid_; }
      set {
        productid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eccode" field.</summary>
    public const int EccodeFieldNumber = 17;
    private string eccode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Eccode {
      get { return eccode_; }
      set {
        eccode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routeid" field.</summary>
    public const int RouteidFieldNumber = 18;
    private string routeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Routeid {
      get { return routeid_; }
      set {
        routeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routever" field.</summary>
    public const int RouteverFieldNumber = 19;
    private string routever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Routever {
      get { return routever_; }
      set {
        routever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cropeno" field.</summary>
    public const int CropenoFieldNumber = 20;
    private string cropeno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cropeno {
      get { return cropeno_; }
      set {
        cropeno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recipeid" field.</summary>
    public const int RecipeidFieldNumber = 21;
    private string recipeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recipeid {
      get { return recipeid_; }
      set {
        recipeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inshtcnt" field.</summary>
    public const int InshtcntFieldNumber = 22;
    private string inshtcnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Inshtcnt {
      get { return inshtcnt_; }
      set {
        inshtcnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stdldtime" field.</summary>
    public const int StdldtimeFieldNumber = 23;
    private string stdldtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stdldtime {
      get { return stdldtime_; }
      set {
        stdldtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manopetime" field.</summary>
    public const int ManopetimeFieldNumber = 24;
    private string manopetime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manopetime {
      get { return manopetime_; }
      set {
        manopetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "piece" field.</summary>
    public const int PieceFieldNumber = 25;
    private string piece_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Piece {
      get { return piece_; }
      set {
        piece_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openoflag" field.</summary>
    public const int OpenoflagFieldNumber = 26;
    private string openoflag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Openoflag {
      get { return openoflag_; }
      set {
        openoflag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 27;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 28;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APMEQRSVo_a1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APMEQRSVo_a1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lotid != other.Lotid) return false;
      if (Nxopeno != other.Nxopeno) return false;
      if (Nxopeid != other.Nxopeid) return false;
      if (Nxopever != other.Nxopever) return false;
      if (Spltid != other.Spltid) return false;
      if (Resveqptid != other.Resveqptid) return false;
      if (Lotstat != other.Lotstat) return false;
      if (Resvdate != other.Resvdate) return false;
      if (Resvshiftseq != other.Resvshiftseq) return false;
      if (Resvcomment != other.Resvcomment) return false;
      if (Planoptweight != other.Planoptweight) return false;
      if (Moveoutweight != other.Moveoutweight) return false;
      if (Shtcnt != other.Shtcnt) return false;
      if (Crshtcnt != other.Crshtcnt) return false;
      if (Runflag != other.Runflag) return false;
      if (Productid != other.Productid) return false;
      if (Eccode != other.Eccode) return false;
      if (Routeid != other.Routeid) return false;
      if (Routever != other.Routever) return false;
      if (Cropeno != other.Cropeno) return false;
      if (Recipeid != other.Recipeid) return false;
      if (Inshtcnt != other.Inshtcnt) return false;
      if (Stdldtime != other.Stdldtime) return false;
      if (Manopetime != other.Manopetime) return false;
      if (Piece != other.Piece) return false;
      if (Openoflag != other.Openoflag) return false;
      if (Key != other.Key) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lotid.Length != 0) hash ^= Lotid.GetHashCode();
      if (Nxopeno.Length != 0) hash ^= Nxopeno.GetHashCode();
      if (Nxopeid.Length != 0) hash ^= Nxopeid.GetHashCode();
      if (Nxopever.Length != 0) hash ^= Nxopever.GetHashCode();
      if (Spltid.Length != 0) hash ^= Spltid.GetHashCode();
      if (Resveqptid.Length != 0) hash ^= Resveqptid.GetHashCode();
      if (Lotstat.Length != 0) hash ^= Lotstat.GetHashCode();
      if (Resvdate.Length != 0) hash ^= Resvdate.GetHashCode();
      if (Resvshiftseq.Length != 0) hash ^= Resvshiftseq.GetHashCode();
      if (Resvcomment.Length != 0) hash ^= Resvcomment.GetHashCode();
      if (Planoptweight.Length != 0) hash ^= Planoptweight.GetHashCode();
      if (Moveoutweight.Length != 0) hash ^= Moveoutweight.GetHashCode();
      if (Shtcnt.Length != 0) hash ^= Shtcnt.GetHashCode();
      if (Crshtcnt.Length != 0) hash ^= Crshtcnt.GetHashCode();
      if (Runflag.Length != 0) hash ^= Runflag.GetHashCode();
      if (Productid.Length != 0) hash ^= Productid.GetHashCode();
      if (Eccode.Length != 0) hash ^= Eccode.GetHashCode();
      if (Routeid.Length != 0) hash ^= Routeid.GetHashCode();
      if (Routever.Length != 0) hash ^= Routever.GetHashCode();
      if (Cropeno.Length != 0) hash ^= Cropeno.GetHashCode();
      if (Recipeid.Length != 0) hash ^= Recipeid.GetHashCode();
      if (Inshtcnt.Length != 0) hash ^= Inshtcnt.GetHashCode();
      if (Stdldtime.Length != 0) hash ^= Stdldtime.GetHashCode();
      if (Manopetime.Length != 0) hash ^= Manopetime.GetHashCode();
      if (Piece.Length != 0) hash ^= Piece.GetHashCode();
      if (Openoflag.Length != 0) hash ^= Openoflag.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lotid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Lotid);
      }
      if (Nxopeno.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nxopeno);
      }
      if (Nxopeid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nxopeid);
      }
      if (Nxopever.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Nxopever);
      }
      if (Spltid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Spltid);
      }
      if (Resveqptid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Resveqptid);
      }
      if (Lotstat.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Lotstat);
      }
      if (Resvdate.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Resvdate);
      }
      if (Resvshiftseq.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Resvshiftseq);
      }
      if (Resvcomment.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Resvcomment);
      }
      if (Planoptweight.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Planoptweight);
      }
      if (Moveoutweight.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Moveoutweight);
      }
      if (Shtcnt.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Shtcnt);
      }
      if (Crshtcnt.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Crshtcnt);
      }
      if (Runflag.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Runflag);
      }
      if (Productid.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Productid);
      }
      if (Eccode.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Eccode);
      }
      if (Routeid.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Routeid);
      }
      if (Routever.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Routever);
      }
      if (Cropeno.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Cropeno);
      }
      if (Recipeid.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Recipeid);
      }
      if (Inshtcnt.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Inshtcnt);
      }
      if (Stdldtime.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Stdldtime);
      }
      if (Manopetime.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Manopetime);
      }
      if (Piece.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Piece);
      }
      if (Openoflag.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Openoflag);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Key);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lotid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotid);
      }
      if (Nxopeno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nxopeno);
      }
      if (Nxopeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nxopeid);
      }
      if (Nxopever.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nxopever);
      }
      if (Spltid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Spltid);
      }
      if (Resveqptid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resveqptid);
      }
      if (Lotstat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotstat);
      }
      if (Resvdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resvdate);
      }
      if (Resvshiftseq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resvshiftseq);
      }
      if (Resvcomment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resvcomment);
      }
      if (Planoptweight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Planoptweight);
      }
      if (Moveoutweight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Moveoutweight);
      }
      if (Shtcnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shtcnt);
      }
      if (Crshtcnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Crshtcnt);
      }
      if (Runflag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Runflag);
      }
      if (Productid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Productid);
      }
      if (Eccode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Eccode);
      }
      if (Routeid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Routeid);
      }
      if (Routever.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Routever);
      }
      if (Cropeno.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Cropeno);
      }
      if (Recipeid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Recipeid);
      }
      if (Inshtcnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Inshtcnt);
      }
      if (Stdldtime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Stdldtime);
      }
      if (Manopetime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Manopetime);
      }
      if (Piece.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Piece);
      }
      if (Openoflag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Openoflag);
      }
      if (Key.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Type.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APMEQRSVo_a1 other) {
      if (other == null) {
        return;
      }
      if (other.Lotid.Length != 0) {
        Lotid = other.Lotid;
      }
      if (other.Nxopeno.Length != 0) {
        Nxopeno = other.Nxopeno;
      }
      if (other.Nxopeid.Length != 0) {
        Nxopeid = other.Nxopeid;
      }
      if (other.Nxopever.Length != 0) {
        Nxopever = other.Nxopever;
      }
      if (other.Spltid.Length != 0) {
        Spltid = other.Spltid;
      }
      if (other.Resveqptid.Length != 0) {
        Resveqptid = other.Resveqptid;
      }
      if (other.Lotstat.Length != 0) {
        Lotstat = other.Lotstat;
      }
      if (other.Resvdate.Length != 0) {
        Resvdate = other.Resvdate;
      }
      if (other.Resvshiftseq.Length != 0) {
        Resvshiftseq = other.Resvshiftseq;
      }
      if (other.Resvcomment.Length != 0) {
        Resvcomment = other.Resvcomment;
      }
      if (other.Planoptweight.Length != 0) {
        Planoptweight = other.Planoptweight;
      }
      if (other.Moveoutweight.Length != 0) {
        Moveoutweight = other.Moveoutweight;
      }
      if (other.Shtcnt.Length != 0) {
        Shtcnt = other.Shtcnt;
      }
      if (other.Crshtcnt.Length != 0) {
        Crshtcnt = other.Crshtcnt;
      }
      if (other.Runflag.Length != 0) {
        Runflag = other.Runflag;
      }
      if (other.Productid.Length != 0) {
        Productid = other.Productid;
      }
      if (other.Eccode.Length != 0) {
        Eccode = other.Eccode;
      }
      if (other.Routeid.Length != 0) {
        Routeid = other.Routeid;
      }
      if (other.Routever.Length != 0) {
        Routever = other.Routever;
      }
      if (other.Cropeno.Length != 0) {
        Cropeno = other.Cropeno;
      }
      if (other.Recipeid.Length != 0) {
        Recipeid = other.Recipeid;
      }
      if (other.Inshtcnt.Length != 0) {
        Inshtcnt = other.Inshtcnt;
      }
      if (other.Stdldtime.Length != 0) {
        Stdldtime = other.Stdldtime;
      }
      if (other.Manopetime.Length != 0) {
        Manopetime = other.Manopetime;
      }
      if (other.Piece.Length != 0) {
        Piece = other.Piece;
      }
      if (other.Openoflag.Length != 0) {
        Openoflag = other.Openoflag;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Lotid = input.ReadString();
            break;
          }
          case 18: {
            Nxopeno = input.ReadString();
            break;
          }
          case 26: {
            Nxopeid = input.ReadString();
            break;
          }
          case 34: {
            Nxopever = input.ReadString();
            break;
          }
          case 42: {
            Spltid = input.ReadString();
            break;
          }
          case 50: {
            Resveqptid = input.ReadString();
            break;
          }
          case 58: {
            Lotstat = input.ReadString();
            break;
          }
          case 66: {
            Resvdate = input.ReadString();
            break;
          }
          case 74: {
            Resvshiftseq = input.ReadString();
            break;
          }
          case 82: {
            Resvcomment = input.ReadString();
            break;
          }
          case 90: {
            Planoptweight = input.ReadString();
            break;
          }
          case 98: {
            Moveoutweight = input.ReadString();
            break;
          }
          case 106: {
            Shtcnt = input.ReadString();
            break;
          }
          case 114: {
            Crshtcnt = input.ReadString();
            break;
          }
          case 122: {
            Runflag = input.ReadString();
            break;
          }
          case 130: {
            Productid = input.ReadString();
            break;
          }
          case 138: {
            Eccode = input.ReadString();
            break;
          }
          case 146: {
            Routeid = input.ReadString();
            break;
          }
          case 154: {
            Routever = input.ReadString();
            break;
          }
          case 162: {
            Cropeno = input.ReadString();
            break;
          }
          case 170: {
            Recipeid = input.ReadString();
            break;
          }
          case 178: {
            Inshtcnt = input.ReadString();
            break;
          }
          case 186: {
            Stdldtime = input.ReadString();
            break;
          }
          case 194: {
            Manopetime = input.ReadString();
            break;
          }
          case 202: {
            Piece = input.ReadString();
            break;
          }
          case 210: {
            Openoflag = input.ReadString();
            break;
          }
          case 218: {
            Key = input.ReadString();
            break;
          }
          case 226: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class APMEQRSVo_a2 : pb::IMessage<APMEQRSVo_a2> {
    private static readonly pb::MessageParser<APMEQRSVo_a2> _parser = new pb::MessageParser<APMEQRSVo_a2>(() => new APMEQRSVo_a2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APMEQRSVo_a2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MqGrpcProject.APMEQRSVioReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSVo_a2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSVo_a2(APMEQRSVo_a2 other) : this() {
      lotid_ = other.lotid_;
      productid_ = other.productid_;
      eccode_ = other.eccode_;
      planoptweight_ = other.planoptweight_;
      shtcnt_ = other.shtcnt_;
      routeid_ = other.routeid_;
      routever_ = other.routever_;
      cropeno_ = other.cropeno_;
      nxopeno_ = other.nxopeno_;
      nxopeid_ = other.nxopeid_;
      nxopever_ = other.nxopever_;
      openoflag_ = other.openoflag_;
      stdldtime_ = other.stdldtime_;
      manopetime_ = other.manopetime_;
      type_ = other.type_;
      fiteqpts_ = other.fiteqpts_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APMEQRSVo_a2 Clone() {
      return new APMEQRSVo_a2(this);
    }

    /// <summary>Field number for the "lotid" field.</summary>
    public const int LotidFieldNumber = 1;
    private string lotid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotid {
      get { return lotid_; }
      set {
        lotid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productid" field.</summary>
    public const int ProductidFieldNumber = 2;
    private string productid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Productid {
      get { return productid_; }
      set {
        productid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eccode" field.</summary>
    public const int EccodeFieldNumber = 3;
    private string eccode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Eccode {
      get { return eccode_; }
      set {
        eccode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "planoptweight" field.</summary>
    public const int PlanoptweightFieldNumber = 4;
    private string planoptweight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Planoptweight {
      get { return planoptweight_; }
      set {
        planoptweight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shtcnt" field.</summary>
    public const int ShtcntFieldNumber = 5;
    private string shtcnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shtcnt {
      get { return shtcnt_; }
      set {
        shtcnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routeid" field.</summary>
    public const int RouteidFieldNumber = 6;
    private string routeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Routeid {
      get { return routeid_; }
      set {
        routeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routever" field.</summary>
    public const int RouteverFieldNumber = 7;
    private string routever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Routever {
      get { return routever_; }
      set {
        routever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cropeno" field.</summary>
    public const int CropenoFieldNumber = 8;
    private string cropeno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cropeno {
      get { return cropeno_; }
      set {
        cropeno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopeno" field.</summary>
    public const int NxopenoFieldNumber = 9;
    private string nxopeno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopeno {
      get { return nxopeno_; }
      set {
        nxopeno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopeid" field.</summary>
    public const int NxopeidFieldNumber = 10;
    private string nxopeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopeid {
      get { return nxopeid_; }
      set {
        nxopeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopever" field.</summary>
    public const int NxopeverFieldNumber = 11;
    private string nxopever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopever {
      get { return nxopever_; }
      set {
        nxopever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openoflag" field.</summary>
    public const int OpenoflagFieldNumber = 12;
    private string openoflag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Openoflag {
      get { return openoflag_; }
      set {
        openoflag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stdldtime" field.</summary>
    public const int StdldtimeFieldNumber = 13;
    private string stdldtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stdldtime {
      get { return stdldtime_; }
      set {
        stdldtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manopetime" field.</summary>
    public const int ManopetimeFieldNumber = 14;
    private string manopetime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manopetime {
      get { return manopetime_; }
      set {
        manopetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 15;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fiteqpts" field.</summary>
    public const int FiteqptsFieldNumber = 16;
    private string fiteqpts_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fiteqpts {
      get { return fiteqpts_; }
      set {
        fiteqpts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APMEQRSVo_a2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APMEQRSVo_a2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lotid != other.Lotid) return false;
      if (Productid != other.Productid) return false;
      if (Eccode != other.Eccode) return false;
      if (Planoptweight != other.Planoptweight) return false;
      if (Shtcnt != other.Shtcnt) return false;
      if (Routeid != other.Routeid) return false;
      if (Routever != other.Routever) return false;
      if (Cropeno != other.Cropeno) return false;
      if (Nxopeno != other.Nxopeno) return false;
      if (Nxopeid != other.Nxopeid) return false;
      if (Nxopever != other.Nxopever) return false;
      if (Openoflag != other.Openoflag) return false;
      if (Stdldtime != other.Stdldtime) return false;
      if (Manopetime != other.Manopetime) return false;
      if (Type != other.Type) return false;
      if (Fiteqpts != other.Fiteqpts) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lotid.Length != 0) hash ^= Lotid.GetHashCode();
      if (Productid.Length != 0) hash ^= Productid.GetHashCode();
      if (Eccode.Length != 0) hash ^= Eccode.GetHashCode();
      if (Planoptweight.Length != 0) hash ^= Planoptweight.GetHashCode();
      if (Shtcnt.Length != 0) hash ^= Shtcnt.GetHashCode();
      if (Routeid.Length != 0) hash ^= Routeid.GetHashCode();
      if (Routever.Length != 0) hash ^= Routever.GetHashCode();
      if (Cropeno.Length != 0) hash ^= Cropeno.GetHashCode();
      if (Nxopeno.Length != 0) hash ^= Nxopeno.GetHashCode();
      if (Nxopeid.Length != 0) hash ^= Nxopeid.GetHashCode();
      if (Nxopever.Length != 0) hash ^= Nxopever.GetHashCode();
      if (Openoflag.Length != 0) hash ^= Openoflag.GetHashCode();
      if (Stdldtime.Length != 0) hash ^= Stdldtime.GetHashCode();
      if (Manopetime.Length != 0) hash ^= Manopetime.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Fiteqpts.Length != 0) hash ^= Fiteqpts.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lotid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Lotid);
      }
      if (Productid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Productid);
      }
      if (Eccode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Eccode);
      }
      if (Planoptweight.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Planoptweight);
      }
      if (Shtcnt.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Shtcnt);
      }
      if (Routeid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Routeid);
      }
      if (Routever.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Routever);
      }
      if (Cropeno.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cropeno);
      }
      if (Nxopeno.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Nxopeno);
      }
      if (Nxopeid.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Nxopeid);
      }
      if (Nxopever.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Nxopever);
      }
      if (Openoflag.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Openoflag);
      }
      if (Stdldtime.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Stdldtime);
      }
      if (Manopetime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Manopetime);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Type);
      }
      if (Fiteqpts.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Fiteqpts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lotid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotid);
      }
      if (Productid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Productid);
      }
      if (Eccode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Eccode);
      }
      if (Planoptweight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Planoptweight);
      }
      if (Shtcnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shtcnt);
      }
      if (Routeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Routeid);
      }
      if (Routever.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Routever);
      }
      if (Cropeno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cropeno);
      }
      if (Nxopeno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nxopeno);
      }
      if (Nxopeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nxopeid);
      }
      if (Nxopever.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nxopever);
      }
      if (Openoflag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Openoflag);
      }
      if (Stdldtime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stdldtime);
      }
      if (Manopetime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Manopetime);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Fiteqpts.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Fiteqpts);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APMEQRSVo_a2 other) {
      if (other == null) {
        return;
      }
      if (other.Lotid.Length != 0) {
        Lotid = other.Lotid;
      }
      if (other.Productid.Length != 0) {
        Productid = other.Productid;
      }
      if (other.Eccode.Length != 0) {
        Eccode = other.Eccode;
      }
      if (other.Planoptweight.Length != 0) {
        Planoptweight = other.Planoptweight;
      }
      if (other.Shtcnt.Length != 0) {
        Shtcnt = other.Shtcnt;
      }
      if (other.Routeid.Length != 0) {
        Routeid = other.Routeid;
      }
      if (other.Routever.Length != 0) {
        Routever = other.Routever;
      }
      if (other.Cropeno.Length != 0) {
        Cropeno = other.Cropeno;
      }
      if (other.Nxopeno.Length != 0) {
        Nxopeno = other.Nxopeno;
      }
      if (other.Nxopeid.Length != 0) {
        Nxopeid = other.Nxopeid;
      }
      if (other.Nxopever.Length != 0) {
        Nxopever = other.Nxopever;
      }
      if (other.Openoflag.Length != 0) {
        Openoflag = other.Openoflag;
      }
      if (other.Stdldtime.Length != 0) {
        Stdldtime = other.Stdldtime;
      }
      if (other.Manopetime.Length != 0) {
        Manopetime = other.Manopetime;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Fiteqpts.Length != 0) {
        Fiteqpts = other.Fiteqpts;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Lotid = input.ReadString();
            break;
          }
          case 18: {
            Productid = input.ReadString();
            break;
          }
          case 26: {
            Eccode = input.ReadString();
            break;
          }
          case 34: {
            Planoptweight = input.ReadString();
            break;
          }
          case 42: {
            Shtcnt = input.ReadString();
            break;
          }
          case 50: {
            Routeid = input.ReadString();
            break;
          }
          case 58: {
            Routever = input.ReadString();
            break;
          }
          case 66: {
            Cropeno = input.ReadString();
            break;
          }
          case 74: {
            Nxopeno = input.ReadString();
            break;
          }
          case 82: {
            Nxopeid = input.ReadString();
            break;
          }
          case 90: {
            Nxopever = input.ReadString();
            break;
          }
          case 98: {
            Openoflag = input.ReadString();
            break;
          }
          case 106: {
            Stdldtime = input.ReadString();
            break;
          }
          case 114: {
            Manopetime = input.ReadString();
            break;
          }
          case 122: {
            Type = input.ReadString();
            break;
          }
          case 130: {
            Fiteqpts = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
