// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: APLRSVPRio.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MqGrpcProject {

  /// <summary>Holder for reflection information generated from APLRSVPRio.proto</summary>
  public static partial class APLRSVPRioReflection {

    #region Descriptor
    /// <summary>File descriptor for APLRSVPRio.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static APLRSVPRioReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBBUExSU1ZQUmlvLnByb3RvEg1NcUdycGNQcm9qZWN0IuoBChBBUExSU1ZQ",
            "Ul9SZXF1ZXN0Eg0KBWJheWlkGAEgASgJEhIKCnJlc3ZlcXB0aWQYAiABKAkS",
            "EAoIcmVzdmRhdGUYAyABKAkSFAoMcmVzdnNoaWZ0c2VxGAQgASgJEhUKDXBy",
            "ZXBzdGFydGRhdGUYBSABKAkSEwoLcHJlcGVuZGRhdGUYBiABKAkSEAoIcHJl",
            "cHR5cGUYByABKAkSDQoFbG90aWQYCCABKAkSFgoOb25seW91dHNpZGVmbGcY",
            "CSABKAkSFAoMbmVlZG9yZGVyZmxnGAogASgJEhAKCHNlcnZlcmlwGAsgASgJ",
            "Ip4BCg5BUExSU1ZQUl9SZXBseRINCgV0cnhpZBgBIAEoCRIOCgZ0eXBlaWQY",
            "AiABKAkSDwoHcnRuY29kZRgDIAEoCRIPCgdydG5tZXNnGAQgASgJEhEKCWxv",
            "dGFyeWNudBgFIAEoCRIoCgRvYXJ5GAYgAygLMhouTXFHcnBjUHJvamVjdC5B",
            "UExSU1ZQUm9fYRIOCgZlcnJtc2cYByABKAki/QMKC0FQTFJTVlBSb19hEg0K",
            "BWxvdGlkGAEgASgJEg8KB2xvdHN0YXQYAiABKAkSDwoHbnhvcGVubxgDIAEo",
            "CRIVCg1tdHJscHJvZHVjdGlkGAQgASgJEhAKCHByZXB0eXBlGAUgASgJEhAK",
            "CHByZXBzdGF0GAYgASgJEhAKCHByZXBkYXRlGAcgASgJEhEKCXByZXBzZXFu",
            "bxgIIAEoCRIQCghyZXN2ZGF0ZRgJIAEoCRIUCgxyZXN2c2hpZnRzZXEYCiAB",
            "KAkSDwoHcm91dGVpZBgLIAEoCRIQCghyb3V0ZXZlchgMIAEoCRIRCgljbGFp",
            "bWRhdGUYDSABKAkSEQoJY2xhaW10aW1lGA4gASgJEhEKCWNsYWltdXNlchgP",
            "IAEoCRIPCgdueG9wZWlkGBAgASgJEhAKCG54b3BldmVyGBEgASgJEg4KBnNw",
            "bHRpZBgSIAEoCRISCgpyZXN2ZXFwdGlkGBMgASgJEg4KBnNodGNudBgUIAEo",
            "CRITCgtyZWFkeXNodGNudBgVIAEoCRIRCglwcm9kdWN0aWQYFiABKAkSDgoG",
            "ZWNjb2RlGBcgASgJEhMKC21haW5yb3V0ZWlkGBggASgJEhQKDG1haW5yb3V0",
            "ZXZlchgZIAEoCRIPCgdjcm9wZW5vGBogASgJEg4KBmxpbmVpZBgbIAEoCUIz",
            "ChVpby5ncnBjLk1xR3JwY1Byb2plY3RCEk1xR3JwY1Byb2plY3RQcm90b1AB",
            "ogIDSExXYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MqGrpcProject.APLRSVPR_Request), global::MqGrpcProject.APLRSVPR_Request.Parser, new[]{ "Bayid", "Resveqptid", "Resvdate", "Resvshiftseq", "Prepstartdate", "Prependdate", "Preptype", "Lotid", "Onlyoutsideflg", "Needorderflg", "Serverip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MqGrpcProject.APLRSVPR_Reply), global::MqGrpcProject.APLRSVPR_Reply.Parser, new[]{ "Trxid", "Typeid", "Rtncode", "Rtnmesg", "Lotarycnt", "Oary", "Errmsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MqGrpcProject.APLRSVPRo_a), global::MqGrpcProject.APLRSVPRo_a.Parser, new[]{ "Lotid", "Lotstat", "Nxopeno", "Mtrlproductid", "Preptype", "Prepstat", "Prepdate", "Prepseqno", "Resvdate", "Resvshiftseq", "Routeid", "Routever", "Claimdate", "Claimtime", "Claimuser", "Nxopeid", "Nxopever", "Spltid", "Resveqptid", "Shtcnt", "Readyshtcnt", "Productid", "Eccode", "Mainrouteid", "Mainroutever", "Cropeno", "Lineid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class APLRSVPR_Request : pb::IMessage<APLRSVPR_Request> {
    private static readonly pb::MessageParser<APLRSVPR_Request> _parser = new pb::MessageParser<APLRSVPR_Request>(() => new APLRSVPR_Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APLRSVPR_Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MqGrpcProject.APLRSVPRioReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APLRSVPR_Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APLRSVPR_Request(APLRSVPR_Request other) : this() {
      bayid_ = other.bayid_;
      resveqptid_ = other.resveqptid_;
      resvdate_ = other.resvdate_;
      resvshiftseq_ = other.resvshiftseq_;
      prepstartdate_ = other.prepstartdate_;
      prependdate_ = other.prependdate_;
      preptype_ = other.preptype_;
      lotid_ = other.lotid_;
      onlyoutsideflg_ = other.onlyoutsideflg_;
      needorderflg_ = other.needorderflg_;
      serverip_ = other.serverip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APLRSVPR_Request Clone() {
      return new APLRSVPR_Request(this);
    }

    /// <summary>Field number for the "bayid" field.</summary>
    public const int BayidFieldNumber = 1;
    private string bayid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bayid {
      get { return bayid_; }
      set {
        bayid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resveqptid" field.</summary>
    public const int ResveqptidFieldNumber = 2;
    private string resveqptid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resveqptid {
      get { return resveqptid_; }
      set {
        resveqptid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resvdate" field.</summary>
    public const int ResvdateFieldNumber = 3;
    private string resvdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resvdate {
      get { return resvdate_; }
      set {
        resvdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resvshiftseq" field.</summary>
    public const int ResvshiftseqFieldNumber = 4;
    private string resvshiftseq_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resvshiftseq {
      get { return resvshiftseq_; }
      set {
        resvshiftseq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prepstartdate" field.</summary>
    public const int PrepstartdateFieldNumber = 5;
    private string prepstartdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prepstartdate {
      get { return prepstartdate_; }
      set {
        prepstartdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prependdate" field.</summary>
    public const int PrependdateFieldNumber = 6;
    private string prependdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prependdate {
      get { return prependdate_; }
      set {
        prependdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "preptype" field.</summary>
    public const int PreptypeFieldNumber = 7;
    private string preptype_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Preptype {
      get { return preptype_; }
      set {
        preptype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lotid" field.</summary>
    public const int LotidFieldNumber = 8;
    private string lotid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotid {
      get { return lotid_; }
      set {
        lotid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "onlyoutsideflg" field.</summary>
    public const int OnlyoutsideflgFieldNumber = 9;
    private string onlyoutsideflg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Onlyoutsideflg {
      get { return onlyoutsideflg_; }
      set {
        onlyoutsideflg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "needorderflg" field.</summary>
    public const int NeedorderflgFieldNumber = 10;
    private string needorderflg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Needorderflg {
      get { return needorderflg_; }
      set {
        needorderflg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverip" field.</summary>
    public const int ServeripFieldNumber = 11;
    private string serverip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serverip {
      get { return serverip_; }
      set {
        serverip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APLRSVPR_Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APLRSVPR_Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bayid != other.Bayid) return false;
      if (Resveqptid != other.Resveqptid) return false;
      if (Resvdate != other.Resvdate) return false;
      if (Resvshiftseq != other.Resvshiftseq) return false;
      if (Prepstartdate != other.Prepstartdate) return false;
      if (Prependdate != other.Prependdate) return false;
      if (Preptype != other.Preptype) return false;
      if (Lotid != other.Lotid) return false;
      if (Onlyoutsideflg != other.Onlyoutsideflg) return false;
      if (Needorderflg != other.Needorderflg) return false;
      if (Serverip != other.Serverip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bayid.Length != 0) hash ^= Bayid.GetHashCode();
      if (Resveqptid.Length != 0) hash ^= Resveqptid.GetHashCode();
      if (Resvdate.Length != 0) hash ^= Resvdate.GetHashCode();
      if (Resvshiftseq.Length != 0) hash ^= Resvshiftseq.GetHashCode();
      if (Prepstartdate.Length != 0) hash ^= Prepstartdate.GetHashCode();
      if (Prependdate.Length != 0) hash ^= Prependdate.GetHashCode();
      if (Preptype.Length != 0) hash ^= Preptype.GetHashCode();
      if (Lotid.Length != 0) hash ^= Lotid.GetHashCode();
      if (Onlyoutsideflg.Length != 0) hash ^= Onlyoutsideflg.GetHashCode();
      if (Needorderflg.Length != 0) hash ^= Needorderflg.GetHashCode();
      if (Serverip.Length != 0) hash ^= Serverip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bayid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Bayid);
      }
      if (Resveqptid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Resveqptid);
      }
      if (Resvdate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Resvdate);
      }
      if (Resvshiftseq.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Resvshiftseq);
      }
      if (Prepstartdate.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Prepstartdate);
      }
      if (Prependdate.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Prependdate);
      }
      if (Preptype.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Preptype);
      }
      if (Lotid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Lotid);
      }
      if (Onlyoutsideflg.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Onlyoutsideflg);
      }
      if (Needorderflg.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Needorderflg);
      }
      if (Serverip.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Serverip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bayid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bayid);
      }
      if (Resveqptid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resveqptid);
      }
      if (Resvdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resvdate);
      }
      if (Resvshiftseq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resvshiftseq);
      }
      if (Prepstartdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prepstartdate);
      }
      if (Prependdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prependdate);
      }
      if (Preptype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Preptype);
      }
      if (Lotid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotid);
      }
      if (Onlyoutsideflg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Onlyoutsideflg);
      }
      if (Needorderflg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Needorderflg);
      }
      if (Serverip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serverip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APLRSVPR_Request other) {
      if (other == null) {
        return;
      }
      if (other.Bayid.Length != 0) {
        Bayid = other.Bayid;
      }
      if (other.Resveqptid.Length != 0) {
        Resveqptid = other.Resveqptid;
      }
      if (other.Resvdate.Length != 0) {
        Resvdate = other.Resvdate;
      }
      if (other.Resvshiftseq.Length != 0) {
        Resvshiftseq = other.Resvshiftseq;
      }
      if (other.Prepstartdate.Length != 0) {
        Prepstartdate = other.Prepstartdate;
      }
      if (other.Prependdate.Length != 0) {
        Prependdate = other.Prependdate;
      }
      if (other.Preptype.Length != 0) {
        Preptype = other.Preptype;
      }
      if (other.Lotid.Length != 0) {
        Lotid = other.Lotid;
      }
      if (other.Onlyoutsideflg.Length != 0) {
        Onlyoutsideflg = other.Onlyoutsideflg;
      }
      if (other.Needorderflg.Length != 0) {
        Needorderflg = other.Needorderflg;
      }
      if (other.Serverip.Length != 0) {
        Serverip = other.Serverip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Bayid = input.ReadString();
            break;
          }
          case 18: {
            Resveqptid = input.ReadString();
            break;
          }
          case 26: {
            Resvdate = input.ReadString();
            break;
          }
          case 34: {
            Resvshiftseq = input.ReadString();
            break;
          }
          case 42: {
            Prepstartdate = input.ReadString();
            break;
          }
          case 50: {
            Prependdate = input.ReadString();
            break;
          }
          case 58: {
            Preptype = input.ReadString();
            break;
          }
          case 66: {
            Lotid = input.ReadString();
            break;
          }
          case 74: {
            Onlyoutsideflg = input.ReadString();
            break;
          }
          case 82: {
            Needorderflg = input.ReadString();
            break;
          }
          case 90: {
            Serverip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class APLRSVPR_Reply : pb::IMessage<APLRSVPR_Reply> {
    private static readonly pb::MessageParser<APLRSVPR_Reply> _parser = new pb::MessageParser<APLRSVPR_Reply>(() => new APLRSVPR_Reply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APLRSVPR_Reply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MqGrpcProject.APLRSVPRioReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APLRSVPR_Reply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APLRSVPR_Reply(APLRSVPR_Reply other) : this() {
      trxid_ = other.trxid_;
      typeid_ = other.typeid_;
      rtncode_ = other.rtncode_;
      rtnmesg_ = other.rtnmesg_;
      lotarycnt_ = other.lotarycnt_;
      oary_ = other.oary_.Clone();
      errmsg_ = other.errmsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APLRSVPR_Reply Clone() {
      return new APLRSVPR_Reply(this);
    }

    /// <summary>Field number for the "trxid" field.</summary>
    public const int TrxidFieldNumber = 1;
    private string trxid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trxid {
      get { return trxid_; }
      set {
        trxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "typeid" field.</summary>
    public const int TypeidFieldNumber = 2;
    private string typeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Typeid {
      get { return typeid_; }
      set {
        typeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rtncode" field.</summary>
    public const int RtncodeFieldNumber = 3;
    private string rtncode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rtncode {
      get { return rtncode_; }
      set {
        rtncode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rtnmesg" field.</summary>
    public const int RtnmesgFieldNumber = 4;
    private string rtnmesg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rtnmesg {
      get { return rtnmesg_; }
      set {
        rtnmesg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lotarycnt" field.</summary>
    public const int LotarycntFieldNumber = 5;
    private string lotarycnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotarycnt {
      get { return lotarycnt_; }
      set {
        lotarycnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oary" field.</summary>
    public const int OaryFieldNumber = 6;
    private static readonly pb::FieldCodec<global::MqGrpcProject.APLRSVPRo_a> _repeated_oary_codec
        = pb::FieldCodec.ForMessage(50, global::MqGrpcProject.APLRSVPRo_a.Parser);
    private readonly pbc::RepeatedField<global::MqGrpcProject.APLRSVPRo_a> oary_ = new pbc::RepeatedField<global::MqGrpcProject.APLRSVPRo_a>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MqGrpcProject.APLRSVPRo_a> Oary {
      get { return oary_; }
    }

    /// <summary>Field number for the "errmsg" field.</summary>
    public const int ErrmsgFieldNumber = 7;
    private string errmsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Errmsg {
      get { return errmsg_; }
      set {
        errmsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APLRSVPR_Reply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APLRSVPR_Reply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Trxid != other.Trxid) return false;
      if (Typeid != other.Typeid) return false;
      if (Rtncode != other.Rtncode) return false;
      if (Rtnmesg != other.Rtnmesg) return false;
      if (Lotarycnt != other.Lotarycnt) return false;
      if(!oary_.Equals(other.oary_)) return false;
      if (Errmsg != other.Errmsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Trxid.Length != 0) hash ^= Trxid.GetHashCode();
      if (Typeid.Length != 0) hash ^= Typeid.GetHashCode();
      if (Rtncode.Length != 0) hash ^= Rtncode.GetHashCode();
      if (Rtnmesg.Length != 0) hash ^= Rtnmesg.GetHashCode();
      if (Lotarycnt.Length != 0) hash ^= Lotarycnt.GetHashCode();
      hash ^= oary_.GetHashCode();
      if (Errmsg.Length != 0) hash ^= Errmsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Trxid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Trxid);
      }
      if (Typeid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Typeid);
      }
      if (Rtncode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Rtncode);
      }
      if (Rtnmesg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Rtnmesg);
      }
      if (Lotarycnt.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Lotarycnt);
      }
      oary_.WriteTo(output, _repeated_oary_codec);
      if (Errmsg.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Errmsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Trxid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trxid);
      }
      if (Typeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Typeid);
      }
      if (Rtncode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rtncode);
      }
      if (Rtnmesg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rtnmesg);
      }
      if (Lotarycnt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotarycnt);
      }
      size += oary_.CalculateSize(_repeated_oary_codec);
      if (Errmsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Errmsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APLRSVPR_Reply other) {
      if (other == null) {
        return;
      }
      if (other.Trxid.Length != 0) {
        Trxid = other.Trxid;
      }
      if (other.Typeid.Length != 0) {
        Typeid = other.Typeid;
      }
      if (other.Rtncode.Length != 0) {
        Rtncode = other.Rtncode;
      }
      if (other.Rtnmesg.Length != 0) {
        Rtnmesg = other.Rtnmesg;
      }
      if (other.Lotarycnt.Length != 0) {
        Lotarycnt = other.Lotarycnt;
      }
      oary_.Add(other.oary_);
      if (other.Errmsg.Length != 0) {
        Errmsg = other.Errmsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Trxid = input.ReadString();
            break;
          }
          case 18: {
            Typeid = input.ReadString();
            break;
          }
          case 26: {
            Rtncode = input.ReadString();
            break;
          }
          case 34: {
            Rtnmesg = input.ReadString();
            break;
          }
          case 42: {
            Lotarycnt = input.ReadString();
            break;
          }
          case 50: {
            oary_.AddEntriesFrom(input, _repeated_oary_codec);
            break;
          }
          case 58: {
            Errmsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class APLRSVPRo_a : pb::IMessage<APLRSVPRo_a> {
    private static readonly pb::MessageParser<APLRSVPRo_a> _parser = new pb::MessageParser<APLRSVPRo_a>(() => new APLRSVPRo_a());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APLRSVPRo_a> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MqGrpcProject.APLRSVPRioReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APLRSVPRo_a() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APLRSVPRo_a(APLRSVPRo_a other) : this() {
      lotid_ = other.lotid_;
      lotstat_ = other.lotstat_;
      nxopeno_ = other.nxopeno_;
      mtrlproductid_ = other.mtrlproductid_;
      preptype_ = other.preptype_;
      prepstat_ = other.prepstat_;
      prepdate_ = other.prepdate_;
      prepseqno_ = other.prepseqno_;
      resvdate_ = other.resvdate_;
      resvshiftseq_ = other.resvshiftseq_;
      routeid_ = other.routeid_;
      routever_ = other.routever_;
      claimdate_ = other.claimdate_;
      claimtime_ = other.claimtime_;
      claimuser_ = other.claimuser_;
      nxopeid_ = other.nxopeid_;
      nxopever_ = other.nxopever_;
      spltid_ = other.spltid_;
      resveqptid_ = other.resveqptid_;
      shtcnt_ = other.shtcnt_;
      readyshtcnt_ = other.readyshtcnt_;
      productid_ = other.productid_;
      eccode_ = other.eccode_;
      mainrouteid_ = other.mainrouteid_;
      mainroutever_ = other.mainroutever_;
      cropeno_ = other.cropeno_;
      lineid_ = other.lineid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APLRSVPRo_a Clone() {
      return new APLRSVPRo_a(this);
    }

    /// <summary>Field number for the "lotid" field.</summary>
    public const int LotidFieldNumber = 1;
    private string lotid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotid {
      get { return lotid_; }
      set {
        lotid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lotstat" field.</summary>
    public const int LotstatFieldNumber = 2;
    private string lotstat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lotstat {
      get { return lotstat_; }
      set {
        lotstat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopeno" field.</summary>
    public const int NxopenoFieldNumber = 3;
    private string nxopeno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopeno {
      get { return nxopeno_; }
      set {
        nxopeno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mtrlproductid" field.</summary>
    public const int MtrlproductidFieldNumber = 4;
    private string mtrlproductid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mtrlproductid {
      get { return mtrlproductid_; }
      set {
        mtrlproductid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "preptype" field.</summary>
    public const int PreptypeFieldNumber = 5;
    private string preptype_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Preptype {
      get { return preptype_; }
      set {
        preptype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prepstat" field.</summary>
    public const int PrepstatFieldNumber = 6;
    private string prepstat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prepstat {
      get { return prepstat_; }
      set {
        prepstat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prepdate" field.</summary>
    public const int PrepdateFieldNumber = 7;
    private string prepdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prepdate {
      get { return prepdate_; }
      set {
        prepdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prepseqno" field.</summary>
    public const int PrepseqnoFieldNumber = 8;
    private string prepseqno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prepseqno {
      get { return prepseqno_; }
      set {
        prepseqno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resvdate" field.</summary>
    public const int ResvdateFieldNumber = 9;
    private string resvdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resvdate {
      get { return resvdate_; }
      set {
        resvdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resvshiftseq" field.</summary>
    public const int ResvshiftseqFieldNumber = 10;
    private string resvshiftseq_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resvshiftseq {
      get { return resvshiftseq_; }
      set {
        resvshiftseq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routeid" field.</summary>
    public const int RouteidFieldNumber = 11;
    private string routeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Routeid {
      get { return routeid_; }
      set {
        routeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routever" field.</summary>
    public const int RouteverFieldNumber = 12;
    private string routever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Routever {
      get { return routever_; }
      set {
        routever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "claimdate" field.</summary>
    public const int ClaimdateFieldNumber = 13;
    private string claimdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Claimdate {
      get { return claimdate_; }
      set {
        claimdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "claimtime" field.</summary>
    public const int ClaimtimeFieldNumber = 14;
    private string claimtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Claimtime {
      get { return claimtime_; }
      set {
        claimtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "claimuser" field.</summary>
    public const int ClaimuserFieldNumber = 15;
    private string claimuser_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Claimuser {
      get { return claimuser_; }
      set {
        claimuser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopeid" field.</summary>
    public const int NxopeidFieldNumber = 16;
    private string nxopeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopeid {
      get { return nxopeid_; }
      set {
        nxopeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nxopever" field.</summary>
    public const int NxopeverFieldNumber = 17;
    private string nxopever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nxopever {
      get { return nxopever_; }
      set {
        nxopever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spltid" field.</summary>
    public const int SpltidFieldNumber = 18;
    private string spltid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spltid {
      get { return spltid_; }
      set {
        spltid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resveqptid" field.</summary>
    public const int ResveqptidFieldNumber = 19;
    private string resveqptid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resveqptid {
      get { return resveqptid_; }
      set {
        resveqptid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shtcnt" field.</summary>
    public const int ShtcntFieldNumber = 20;
    private string shtcnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shtcnt {
      get { return shtcnt_; }
      set {
        shtcnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "readyshtcnt" field.</summary>
    public const int ReadyshtcntFieldNumber = 21;
    private string readyshtcnt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Readyshtcnt {
      get { return readyshtcnt_; }
      set {
        readyshtcnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productid" field.</summary>
    public const int ProductidFieldNumber = 22;
    private string productid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Productid {
      get { return productid_; }
      set {
        productid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eccode" field.</summary>
    public const int EccodeFieldNumber = 23;
    private string eccode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Eccode {
      get { return eccode_; }
      set {
        eccode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mainrouteid" field.</summary>
    public const int MainrouteidFieldNumber = 24;
    private string mainrouteid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mainrouteid {
      get { return mainrouteid_; }
      set {
        mainrouteid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mainroutever" field.</summary>
    public const int MainrouteverFieldNumber = 25;
    private string mainroutever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mainroutever {
      get { return mainroutever_; }
      set {
        mainroutever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cropeno" field.</summary>
    public const int CropenoFieldNumber = 26;
    private string cropeno_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cropeno {
      get { return cropeno_; }
      set {
        cropeno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lineid" field.</summary>
    public const int LineidFieldNumber = 27;
    private string lineid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lineid {
      get { return lineid_; }
      set {
        lineid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APLRSVPRo_a);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APLRSVPRo_a other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lotid != other.Lotid) return false;
      if (Lotstat != other.Lotstat) return false;
      if (Nxopeno != other.Nxopeno) return false;
      if (Mtrlproductid != other.Mtrlproductid) return false;
      if (Preptype != other.Preptype) return false;
      if (Prepstat != other.Prepstat) return false;
      if (Prepdate != other.Prepdate) return false;
      if (Prepseqno != other.Prepseqno) return false;
      if (Resvdate != other.Resvdate) return false;
      if (Resvshiftseq != other.Resvshiftseq) return false;
      if (Routeid != other.Routeid) return false;
      if (Routever != other.Routever) return false;
      if (Claimdate != other.Claimdate) return false;
      if (Claimtime != other.Claimtime) return false;
      if (Claimuser != other.Claimuser) return false;
      if (Nxopeid != other.Nxopeid) return false;
      if (Nxopever != other.Nxopever) return false;
      if (Spltid != other.Spltid) return false;
      if (Resveqptid != other.Resveqptid) return false;
      if (Shtcnt != other.Shtcnt) return false;
      if (Readyshtcnt != other.Readyshtcnt) return false;
      if (Productid != other.Productid) return false;
      if (Eccode != other.Eccode) return false;
      if (Mainrouteid != other.Mainrouteid) return false;
      if (Mainroutever != other.Mainroutever) return false;
      if (Cropeno != other.Cropeno) return false;
      if (Lineid != other.Lineid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lotid.Length != 0) hash ^= Lotid.GetHashCode();
      if (Lotstat.Length != 0) hash ^= Lotstat.GetHashCode();
      if (Nxopeno.Length != 0) hash ^= Nxopeno.GetHashCode();
      if (Mtrlproductid.Length != 0) hash ^= Mtrlproductid.GetHashCode();
      if (Preptype.Length != 0) hash ^= Preptype.GetHashCode();
      if (Prepstat.Length != 0) hash ^= Prepstat.GetHashCode();
      if (Prepdate.Length != 0) hash ^= Prepdate.GetHashCode();
      if (Prepseqno.Length != 0) hash ^= Prepseqno.GetHashCode();
      if (Resvdate.Length != 0) hash ^= Resvdate.GetHashCode();
      if (Resvshiftseq.Length != 0) hash ^= Resvshiftseq.GetHashCode();
      if (Routeid.Length != 0) hash ^= Routeid.GetHashCode();
      if (Routever.Length != 0) hash ^= Routever.GetHashCode();
      if (Claimdate.Length != 0) hash ^= Claimdate.GetHashCode();
      if (Claimtime.Length != 0) hash ^= Claimtime.GetHashCode();
      if (Claimuser.Length != 0) hash ^= Claimuser.GetHashCode();
      if (Nxopeid.Length != 0) hash ^= Nxopeid.GetHashCode();
      if (Nxopever.Length != 0) hash ^= Nxopever.GetHashCode();
      if (Spltid.Length != 0) hash ^= Spltid.GetHashCode();
      if (Resveqptid.Length != 0) hash ^= Resveqptid.GetHashCode();
      if (Shtcnt.Length != 0) hash ^= Shtcnt.GetHashCode();
      if (Readyshtcnt.Length != 0) hash ^= Readyshtcnt.GetHashCode();
      if (Productid.Length != 0) hash ^= Productid.GetHashCode();
      if (Eccode.Length != 0) hash ^= Eccode.GetHashCode();
      if (Mainrouteid.Length != 0) hash ^= Mainrouteid.GetHashCode();
      if (Mainroutever.Length != 0) hash ^= Mainroutever.GetHashCode();
      if (Cropeno.Length != 0) hash ^= Cropeno.GetHashCode();
      if (Lineid.Length != 0) hash ^= Lineid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lotid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Lotid);
      }
      if (Lotstat.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Lotstat);
      }
      if (Nxopeno.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nxopeno);
      }
      if (Mtrlproductid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Mtrlproductid);
      }
      if (Preptype.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Preptype);
      }
      if (Prepstat.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Prepstat);
      }
      if (Prepdate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Prepdate);
      }
      if (Prepseqno.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Prepseqno);
      }
      if (Resvdate.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Resvdate);
      }
      if (Resvshiftseq.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Resvshiftseq);
      }
      if (Routeid.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Routeid);
      }
      if (Routever.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Routever);
      }
      if (Claimdate.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Claimdate);
      }
      if (Claimtime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Claimtime);
      }
      if (Claimuser.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Claimuser);
      }
      if (Nxopeid.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Nxopeid);
      }
      if (Nxopever.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Nxopever);
      }
      if (Spltid.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Spltid);
      }
      if (Resveqptid.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Resveqptid);
      }
      if (Shtcnt.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Shtcnt);
      }
      if (Readyshtcnt.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Readyshtcnt);
      }
      if (Productid.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Productid);
      }
      if (Eccode.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Eccode);
      }
      if (Mainrouteid.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Mainrouteid);
      }
      if (Mainroutever.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Mainroutever);
      }
      if (Cropeno.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Cropeno);
      }
      if (Lineid.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Lineid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lotid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotid);
      }
      if (Lotstat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lotstat);
      }
      if (Nxopeno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nxopeno);
      }
      if (Mtrlproductid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mtrlproductid);
      }
      if (Preptype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Preptype);
      }
      if (Prepstat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prepstat);
      }
      if (Prepdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prepdate);
      }
      if (Prepseqno.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prepseqno);
      }
      if (Resvdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resvdate);
      }
      if (Resvshiftseq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resvshiftseq);
      }
      if (Routeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Routeid);
      }
      if (Routever.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Routever);
      }
      if (Claimdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Claimdate);
      }
      if (Claimtime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Claimtime);
      }
      if (Claimuser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Claimuser);
      }
      if (Nxopeid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Nxopeid);
      }
      if (Nxopever.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Nxopever);
      }
      if (Spltid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Spltid);
      }
      if (Resveqptid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Resveqptid);
      }
      if (Shtcnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Shtcnt);
      }
      if (Readyshtcnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Readyshtcnt);
      }
      if (Productid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Productid);
      }
      if (Eccode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Eccode);
      }
      if (Mainrouteid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mainrouteid);
      }
      if (Mainroutever.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mainroutever);
      }
      if (Cropeno.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Cropeno);
      }
      if (Lineid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Lineid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APLRSVPRo_a other) {
      if (other == null) {
        return;
      }
      if (other.Lotid.Length != 0) {
        Lotid = other.Lotid;
      }
      if (other.Lotstat.Length != 0) {
        Lotstat = other.Lotstat;
      }
      if (other.Nxopeno.Length != 0) {
        Nxopeno = other.Nxopeno;
      }
      if (other.Mtrlproductid.Length != 0) {
        Mtrlproductid = other.Mtrlproductid;
      }
      if (other.Preptype.Length != 0) {
        Preptype = other.Preptype;
      }
      if (other.Prepstat.Length != 0) {
        Prepstat = other.Prepstat;
      }
      if (other.Prepdate.Length != 0) {
        Prepdate = other.Prepdate;
      }
      if (other.Prepseqno.Length != 0) {
        Prepseqno = other.Prepseqno;
      }
      if (other.Resvdate.Length != 0) {
        Resvdate = other.Resvdate;
      }
      if (other.Resvshiftseq.Length != 0) {
        Resvshiftseq = other.Resvshiftseq;
      }
      if (other.Routeid.Length != 0) {
        Routeid = other.Routeid;
      }
      if (other.Routever.Length != 0) {
        Routever = other.Routever;
      }
      if (other.Claimdate.Length != 0) {
        Claimdate = other.Claimdate;
      }
      if (other.Claimtime.Length != 0) {
        Claimtime = other.Claimtime;
      }
      if (other.Claimuser.Length != 0) {
        Claimuser = other.Claimuser;
      }
      if (other.Nxopeid.Length != 0) {
        Nxopeid = other.Nxopeid;
      }
      if (other.Nxopever.Length != 0) {
        Nxopever = other.Nxopever;
      }
      if (other.Spltid.Length != 0) {
        Spltid = other.Spltid;
      }
      if (other.Resveqptid.Length != 0) {
        Resveqptid = other.Resveqptid;
      }
      if (other.Shtcnt.Length != 0) {
        Shtcnt = other.Shtcnt;
      }
      if (other.Readyshtcnt.Length != 0) {
        Readyshtcnt = other.Readyshtcnt;
      }
      if (other.Productid.Length != 0) {
        Productid = other.Productid;
      }
      if (other.Eccode.Length != 0) {
        Eccode = other.Eccode;
      }
      if (other.Mainrouteid.Length != 0) {
        Mainrouteid = other.Mainrouteid;
      }
      if (other.Mainroutever.Length != 0) {
        Mainroutever = other.Mainroutever;
      }
      if (other.Cropeno.Length != 0) {
        Cropeno = other.Cropeno;
      }
      if (other.Lineid.Length != 0) {
        Lineid = other.Lineid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Lotid = input.ReadString();
            break;
          }
          case 18: {
            Lotstat = input.ReadString();
            break;
          }
          case 26: {
            Nxopeno = input.ReadString();
            break;
          }
          case 34: {
            Mtrlproductid = input.ReadString();
            break;
          }
          case 42: {
            Preptype = input.ReadString();
            break;
          }
          case 50: {
            Prepstat = input.ReadString();
            break;
          }
          case 58: {
            Prepdate = input.ReadString();
            break;
          }
          case 66: {
            Prepseqno = input.ReadString();
            break;
          }
          case 74: {
            Resvdate = input.ReadString();
            break;
          }
          case 82: {
            Resvshiftseq = input.ReadString();
            break;
          }
          case 90: {
            Routeid = input.ReadString();
            break;
          }
          case 98: {
            Routever = input.ReadString();
            break;
          }
          case 106: {
            Claimdate = input.ReadString();
            break;
          }
          case 114: {
            Claimtime = input.ReadString();
            break;
          }
          case 122: {
            Claimuser = input.ReadString();
            break;
          }
          case 130: {
            Nxopeid = input.ReadString();
            break;
          }
          case 138: {
            Nxopever = input.ReadString();
            break;
          }
          case 146: {
            Spltid = input.ReadString();
            break;
          }
          case 154: {
            Resveqptid = input.ReadString();
            break;
          }
          case 162: {
            Shtcnt = input.ReadString();
            break;
          }
          case 170: {
            Readyshtcnt = input.ReadString();
            break;
          }
          case 178: {
            Productid = input.ReadString();
            break;
          }
          case 186: {
            Eccode = input.ReadString();
            break;
          }
          case 194: {
            Mainrouteid = input.ReadString();
            break;
          }
          case 202: {
            Mainroutever = input.ReadString();
            break;
          }
          case 210: {
            Cropeno = input.ReadString();
            break;
          }
          case 218: {
            Lineid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
